import { CommonModule } from '@angular/common';
import { Component, Input, Output,EventEmitter } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BillService } from '../../../services/bill/bill.service';
import { IBillDetail } from '../../../interfaces/i-Bill';
import { PreviewService } from '../../../services/preview/preview.service';
import { IOrderProduct } from '../../../interfaces/i-Order';
import { IPreview } from '../../../interfaces/i-Preview';
import { NotificationComponent } from '../../notification/notification.component';

@Component({
  selector: 'app-preview',
  standalone: true,
  imports: [FormsModule, CommonModule, NotificationComponent],
  templateUrl: './preview.component.html',
  styleUrls: ['./preview.component.css'],
})
export class PreviewComponent {
  // Đánh giá sao
  @Input() idBill!: number;
  @Output() closeFormEvent = new EventEmitter<void>();
  preview: IPreview;
  // Bình luận người dùng
  comment: string = '';
  idCustomer: number = 0;
  // Modal visibility flag
  showModal: boolean = false;
  constructor(
    private BillService: BillService,
    private previewService: PreviewService
  ) {}
  ngOnInit() {
    // Lấy thông tin đánh giá đã đưa lên
    this.BillService.getBillId(this.idBill).subscribe((data) => {
      this.idCustomer = data.idcustomer;
      this.orderDetails = { orders: data.orders };
    });
  }
  // Xử lý sự kiện khi người dùng chọn saoselectedRating: { [key: number]: number } = {};

  // Hàm xử lý khi người dùng chọn sao
  orderDetails: { orders: IOrderProduct[] } = { orders: [] }; // Dữ liệu đơn hàng
  selectedRating: { [orderId: number]: number } = {}; // Lưu trữ sao đã chọn cho mỗi sản phẩm
  comments: { [orderId: number]: string } = {};

  // Hàm xử lý khi người dùng chọn sao
  rateProduct(orderId: number, rating: number) {
    this.selectedRating[orderId] = rating; // Lưu trữ sao đã chọn cho sản phẩm cụ thể
  }

  // Hàm để lấy bình luận cho sản phẩm
  onCommentChange(orderId: number, comment: string) {
    this.comments[orderId] = comment; // Lưu trữ bình luận cho sản phẩm cụ thể
  }
  message: string = '';
  check() {
    let allCommentsValid = true;
    for (const order of this.orderDetails.orders) {
      if (
        !this.comments[order.idorder] ||
        this.comments[order.idorder].trim() === ''
      ) {
        allCommentsValid = false;
        this.message =
          'Vui lòng nhập đầy đủ bình luận cho tất cả các sản phẩm.';
        setTimeout(() => {
          this.message = '';
        }, 1000);
        break;
      }
    }
    if (allCommentsValid) {
      this.submitAllReviews();
    }
  }
  submitAllReviews() {
    // Map the orders to the preview object
    const previews: IPreview[] = this.orderDetails.orders.map((order) => ({
      idpreview: 0, // Default value if not generated by backend
      idproduct: order.idproduct, // Dữ liệu sản phẩm
      idcustomer: this.idCustomer, // Dữ liệu khách hàng
      preview1: this.selectedRating[order.idorder] || 0, // Sao đã chọn
      idbill: order.idbill, // Dữ liệu hóa đơn
      dateprevew: new Date().toISOString(), // Thời gian gửi đánh giá
      comment: this.comments[order.idorder] || '', // Bình luận
    }));

    // Send all previews via the service
    previews.forEach((preview) => {
      this.previewService.createPreview(preview).subscribe({
        next: () => {
          this.closeModal()
        }
      });
    });

    // Reset the message after submission (if needed)
    this.message = '';
    return false;
  }

  // Đóng modal
  closeModal(): void {
    this.closeFormEvent.emit();
  }
}
